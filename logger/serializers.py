from rest_framework import serializers
from .models import (
    MuscleGroup, Equipment, Exercise, Workout, WorkoutExercise,
    MealEntry, DailyLog
)

class MuscleGroupSerializer(serializers.ModelSerializer):
    """Convert MuscleGroup objects to/from JSON"""
    class Meta:
        model = MuscleGroup
        fields = ['id', 'name']

class EquipmentSerializer(serializers.ModelSerializer):
    """Convert Equipment objects to/from JSON"""
    class Meta:
        model = Equipment
        fields = ['id', 'name']

class ExerciseSerializer(serializers.ModelSerializer):
    """Convert Exercise objects to/from JSON with related data"""
    primary_muscle_group_name = serializers.CharField(source='primary_muscle_group.name', read_only=True)
    equipment_name = serializers.CharField(source='equipment.name', read_only=True)
    secondary_muscle_groups_names = serializers.SerializerMethodField()
    
    class Meta:
        model = Exercise
        fields = [
            'id', 'name', 'primary_muscle_group', 'primary_muscle_group_name',
            'secondary_muscle_groups', 'secondary_muscle_groups_names',
            'equipment', 'equipment_name', 'notes', 'created_at'
        ]
    
    def get_secondary_muscle_groups_names(self, obj):
        """Get list of secondary muscle group names"""
        return [mg.name for mg in obj.secondary_muscle_groups.all()]

class WorkoutExerciseSerializer(serializers.ModelSerializer):
    """Convert WorkoutExercise junction table to/from JSON"""
    exercise_name = serializers.CharField(source='exercise.name', read_only=True)
    primary_muscle_group = serializers.CharField(source='exercise.primary_muscle_group.name', read_only=True)
    equipment = serializers.CharField(source='exercise.equipment.name', read_only=True)
    
    class Meta:
        model = WorkoutExercise
        fields = [
            'id', 'exercise', 'exercise_name', 'primary_muscle_group', 'equipment',
            'sets', 'reps', 'weight', 'rest_seconds', 'notes', 'order'
        ]

class WorkoutSerializer(serializers.ModelSerializer):
    """Convert Workout objects to/from JSON with all exercises included"""
    workout_exercises = WorkoutExerciseSerializer(source='workoutexercise_set', many=True, read_only=True)
    exercise_count = serializers.SerializerMethodField()
    
    class Meta:
        model = Workout
        fields = [
            'id', 'name', 'date', 'notes', 'created_at',
            'workout_exercises', 'exercise_count'
        ]
    
    def get_exercise_count(self, obj):
        """Count how many exercises are in this workout"""
        return obj.workoutexercise_set.count()

# --- AI Workout Creation Serializer ---

class AIWorkoutCreateSerializer(serializers.Serializer):
    """
    Special serializer for AI-generated workouts
    This handles the data coming from n8n/AI and creates workouts
    """
    user_id = serializers.IntegerField(default=1)
    workout_name = serializers.CharField(max_length=200)
    workout_date = serializers.DateField(required=False)
    notes = serializers.CharField(required=False, allow_blank=True)
    
    # List of exercises with their details
    exercises = serializers.ListField(
        child=serializers.DictField(
            child=serializers.CharField()
        )
    )
    
    def validate_exercises(self, value):
        """Make sure each exercise has required fields"""
        for exercise in value:
            if 'name' not in exercise:
                raise serializers.ValidationError("Each exercise must have a 'name' field")
            if 'sets' not in exercise:
                exercise['sets'] = 3  # Default
            if 'reps' not in exercise:
                exercise['reps'] = 10  # Default
        return value
    
    def create(self, validated_data):
        """Create a workout from AI-processed data"""
        from datetime import date
        from django.contrib.auth.models import User
        
        # Extract data
        user_id = validated_data.get('user_id', 1)
        workout_name = validated_data['workout_name']
        workout_date = validated_data.get('workout_date', date.today())
        notes = validated_data.get('notes', 'Generated by AI assistant')
        exercises_data = validated_data['exercises']
        
        # Get user
        try:
            user = User.objects.get(id=user_id)
        except User.DoesNotExist:
            user = User.objects.first()  # Fallback to first user
        
        # Create the workout
        workout = Workout.objects.create(
            user=user,
            name=workout_name,
            date=workout_date,
            notes=notes
        )
        
        # Add exercises
        for order, exercise_data in enumerate(exercises_data):
            # Find or create the exercise
            exercise, created = Exercise.objects.get_or_create(
                name=exercise_data['name'],
                defaults={
                    'primary_muscle_group': self._get_or_create_muscle_group(exercise_data.get('muscle_group', 'General')),
                    'equipment': self._get_or_create_equipment(exercise_data.get('equipment', 'Bodyweight')),
                    'notes': f"AI suggested exercise: {exercise_data['name']}"
                }
            )
            
            # Create workout exercise
            WorkoutExercise.objects.create(
                workout=workout,
                exercise=exercise,
                sets=int(exercise_data.get('sets', 3)),
                reps=int(exercise_data.get('reps', 10)),
                weight=float(exercise_data['weight']) if exercise_data.get('weight') else None,
                rest_seconds=int(exercise_data['rest_seconds']) if exercise_data.get('rest_seconds') else None,
                notes=exercise_data.get('notes', ''),
                order=order
            )
        
        return workout
    
    def _get_or_create_muscle_group(self, name):
        """Helper to get or create muscle group"""
        muscle_group, _ = MuscleGroup.objects.get_or_create(name=name)
        return muscle_group
    
    def _get_or_create_equipment(self, name):
        """Helper to get or create equipment"""
        equipment, _ = Equipment.objects.get_or_create(name=name)
        return equipment

# --- Meal and Daily Log Serializers ---

class MealEntrySerializer(serializers.ModelSerializer):
    """Convert MealEntry objects to/from JSON"""
    class Meta:
        model = MealEntry
        fields = [
            'id', 'name', 'calories', 'protein', 'carbs', 'fats',
            'date', 'created_at'
        ]

class DailyLogSerializer(serializers.ModelSerializer):
    """Convert DailyLog objects to/from JSON with related data"""
    workouts = WorkoutSerializer(many=True, read_only=True)
    meals = MealEntrySerializer(many=True, read_only=True)
    
    class Meta:
        model = DailyLog
        fields = [
            'id', 'date', 'workouts', 'meals',
            'total_calories', 'total_protein', 'total_carbs', 'total_fats'
        ]

# --- Saved Workout Serializers ---

